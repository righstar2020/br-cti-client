name: "br-cti-Network"
version: "1.0"
# client:
#   organization: Org1
#   logging:
#     level: info
#   # cryptoconfig:
#   #   path: /home/ct/workspace/crypto/chain2a2/crypto-config
#   # credentialStore:
#   #   path: "/tmp/state-store"
#   #   cryptoStore:
#   #     # Specific to the underlying KeyValueStore that backs the crypto key store.
#   #     path: /tmp/msp
#   BCCSP:
#     security:
#       enabled: true
#       default:
#         provider: "SW"
#       hashAlgorithm: "SHA2"
#       softVerify: true
#       level: 256

#   tlsCerts:
#     systemCertPool: true
#     client:
#       key:
#         path: F:/CWord/比赛/CCF区块链/CTI_blockchain/client/fabric-server/config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key
#       cert:
#         path: F:/CWord/比赛/CCF区块链/CTI_blockchain/client/fabric-server/config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt

channels:
  mychannel:
    orderers:
      - orderer.example.com
    peers:
      peer0.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true
    policies:
      queryChannelConfig:
        minResponses: 1
        maxTargets: 1
        retryOpts:
          attempts: 5
          initialBackoff: 500ms
          maxBackoff: 5s
          backoffFactor: 2.0
          
organizations:
  Org1:
    mspid: Org1MSP
    users:
      Admin:
        key:
          path: F:/CWord/比赛/CCF区块链/CTI_blockchain/client/fabric-server/config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/priv_sk
        cert:
          path: F:/CWord/比赛/CCF区块链/CTI_blockchain/client/fabric-server/config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem
    peers:
      - peer0.org1.example.com
  ordererorg:
    mspID: OrdererMSP
    cryptoPath: F:/CWord/比赛/CCF区块链/CTI_blockchain/client/fabric-server/config/ordererOrganizations/example.com/users/Admin@example.com/msp

peers:
  peer0.org1.example.com:
    url: grpcs://172.22.232.42:7051
    grpcOptions:
      # ssl-target-name-override: peer0.org1.example.com
      keep-alive-time: 10s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
    tlsCACerts:
      path: F:/CWord/比赛/CCF区块链/CTI_blockchain/client/fabric-server/config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem

orderers:
  orderer.example.com:
    url: grpcs://172.22.232.42:7050
    grpcOptions:
      # ssl-target-name-override: orderer.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
    tlsCACerts:
      path: F:/CWord/比赛/CCF区块链/CTI_blockchain/client/fabric-server/config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem    

entityMatchers:
  peer:
    # the below matcher will allow dynamic discovery to use the anchor peer (peer0.org1.example.com)
    # as a template for all org1 discovered peers config
    - pattern: peer0.org1.example.com
      urlsubstitutionexp: grpcs://172.22.232.42:7051
      ssltargetoverrideurlsubstitutionexp: peer0.org1.example.com
      mappedhost: peer0.org1.example.com


    - pattern: peer0.org2.example.com
      urlSubstitutionExp: grpcs://172.22.232.42:7051
      sslTargetOverrideUrlSubstitutionExp: peer0.org2.example.com
      mappedHost: peer0.org2.example.com

  orderer:
    - pattern: orderer.example.com
      urlsubstitutionexp: 172.22.232.42:7050
      ssltargetoverrideurlsubstitutionexp: orderer.example.com
      mappedhost: orderer.example.com
# certificateAuthorities:
#   ca.org1.example.com:
#     url: https://localhost:7054
#     caName: ca-org1
#     tlsCACerts:
#       path: F:/CWord/比赛/CCF区块链/CTI_blockchain/client/fabric-server/config/ordererOrganizations/example.com/ca/ca.example.com-cert.pem
#     httpOptions:
#       verify: false